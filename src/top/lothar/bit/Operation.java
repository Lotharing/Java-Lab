package top.lothar.bit;

/**
 * <h1>位运算</h1>
 *
 * 关于 原码 反码 补码
 * 原码：就是二进制定点表示法，即最高位为符号位，“0”正 “1”负，其余位表示数值的大小。
 * 反码：正数的反码与其原码相同；负数的反码是对正数逐位取反，符号位保持为1。
 * 补码：正数的补码与其原码相同；负数的补码是在其反码的末位加1。

 * “88”的原码：00000000 00000000 00000000 01011000
 * “88”的反码：00000000 00000000 00000000 01011000
 * “88”的补码：00000000 00000000 00000000 01011000
 * 对于负数 “-88”，其原码、反码以及补码如下：
 * “-88”的原码：10000000 00000000 00000000 01011000
 * “-88”的反码：11111111 11111111 11111111 10100111
 * “-88”的补码：11111111 11111111 11111111 10101000
 *

 * @author LuTong.Zhao
 * @Date 2020/11/13 10:50
 */
public class Operation {

    public static void main(String[] args) {
        parity(97);
    }

    public static void parity(int num){

        /**
         * 按位与 & 只有对应的两个二进位都为1时，结果位才为1。参与运算的两个数均以补码出现。
         */

        // 按位与 &  只有对应的两个二进位都为1时，结果位才为1。参与运算的两个数均以补码出现
        // 3  二进制  0000 0011
        // 1  二进制  0000 0001
        if ((num & 1) == 1){
            System.out.println("位运算判断是奇数");
        }

        // 2^n    4  二进制 0000 0100
        // 2^n-1  3  二进制 0000 0011
        // 按位与 4&3 运算是 0000 0000
        if ((num & num-1)==0){
            System.out.println("位运算判断是2^n");
        }

        /**
         * 按位或 ｜ 只要对应的两个二进位有一个为1时，结果位就为1。当参与运算的是负数时，参与两个数均以补码出现
         * 负数：
         * 反码是在其原码的基础上, 符号位不变，其余各个位取反
         * 补码是在其原码的基础上, 符号位不变, 其余各位取反, 最后+1. （即在反码的基础上+1）
         */

        // 3 | 4
        // 0000 0011
        // 0000 0110
        // 0000 0111 =  7
        System.out.println(3 | 4);

        // 1111 1101 [-3原码：1000 0011 反码：1111 1100 补码：1111 1101] -
        // 0000 0100 [ 4原码：0000 0100 反码：0000 0100 补码：0000 0100] +
        // ------- // 逐位取反 + 1
        // 1111 1101 反码 1000 0010 补码 1000 0011 求原码 1000 0011 = -3
        System.out.println(-3 | 4);

        /**
         * 按位异或 ^
         * 如果对应的两个二进位值不相同，则异或结果为1。如果对应的两个二进位值相同，异或结果为0。
         */
        // 7 ^ 8
        // 0000 0111
        // 0000 1000
        //         ---------
        // 0000 1111
        System.out.println(7 ^ 8);
        // 将 0000 1111 转换为十进制为 15

        // -3 ^ 4
        // 1111 1101 [-3原码：1000 0011 反码：1111 1100 补码：1111 1101] -
        // 0000 0100
        // 1111 1001 反码 [1000 0110] 补码[1000 0111] 求原[1000 0111] 转化十进制 - 7
        System.out.println(-3 ^ 4);

        /**
         * 按位取反 ~
         * 先+1 在取反  公式： -（num+1）
         * 二进制值每一位取反，0变1，1变0。
         */
        // ~3
        // 0000 0011
        // 0111 1100
        // 逐位取反 + 1
        // 1000 0100
        System.out.println(~3); // -4

        //-3
        // 原码： 1 000 0011
        // 反码： 1 111 1100
        // 补码： 1 111 1101
        // 取反： 0 000 0010
        System.out.println(~-3); // 2


        /**
         * 按位左移 <<
         * 参加运算的数换算为二进制后，进行左移运算，用来将一个数各二进制位全部向左移动若干位。
         *
         * 按位右移 >>
         * 参加运算的数换算为二进制后，进行左移运算，用来将一个数各二进制位全部向右移动若干位。
         */
        // 3 << 2
        // 0000 0011
        // ---------
        // 0000 1100
        System.out.println(3 << 2); // 12

        // 3 >> 2
        // 0000 0011
        // ---------
        // 0000 0000
        System.out.println(3 >> 2); // 0
    }


}
